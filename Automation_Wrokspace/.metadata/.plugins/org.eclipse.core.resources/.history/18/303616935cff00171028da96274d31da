package com.milvik.mip.customermanagement.testrunner;

import java.util.List;

import org.apache.log4j.Logger;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;
import org.testng.ITestResult;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Optional;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import com.milvik.mip.constants.MIP_Menu_Constants;
import com.milvik.mip.dataprovider.MIP_CustomerManagement_TestData;
import com.milvik.mip.dbqueries.MIP_SwitchProductLevel_Queries;
import com.milvik.mip.dbqueries.MIP_UserManagement_Queries;
import com.milvik.mip.pageobjects.MIP_CoverHistoryPage;
import com.milvik.mip.pageobjects.MIP_HomePage;
import com.milvik.mip.pageobjects.MIP_LoginPage;
import com.milvik.mip.pageobjects.MIP_SwitchProductLevelPage;
import com.milvik.mip.utility.MIP_BrowserFactory;
import com.milvik.mip.utility.MIP_DataBaseConnection;
import com.milvik.mip.utility.MIP_LaunchApplication;
import com.milvik.mip.utility.MIP_Logging;
import com.milvik.mip.utility.MIP_ReadPropertyFile;
import com.milvik.mip.utility.MIP_ScreenShots;
import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;

public class MIP_SwitchProductLevel_Test {
	WebDriver driver;
	ExtentReports report;
	ExtentTest logger;
	static Logger log;

	@BeforeTest
	@Parameters({ "browser" })
	public void test_setup(@Optional("firefox") String browser) {
		log = MIP_Logging.logDetails("MIP_SwitchProductLevel_Test");
		report = new ExtentReports(
				".\\Test_Reports\\MIP_SwitchProductLevel_Test.html");
		try {
			Runtime.getRuntime().exec("taskkill /F /IM geckodriver.exe");
		} catch (Exception e) {
			System.out.println("No exe found");
		}
		MIP_ReadPropertyFile.loadProperty("config");
		MIP_DataBaseConnection.connectToDatabase();
		driver = MIP_BrowserFactory.openBrowser(driver, browser);

	}

	@BeforeMethod
	public void startTest() {
		try {
			MIP_LaunchApplication.openApplication(driver);
		} catch (Exception e) {

		}

	}

	@Test(testName = "TC316")
	public void switchProductLevelOne() throws Throwable {
		MIP_SwitchProductLevelPage switchprodictlevel = null;
		try {
			logger = report.startTest("CoverHistory-TC316");
			log.info("Running the test case TC316");
			MIP_LoginPage loginpage = PageFactory.initElements(driver,
					MIP_LoginPage.class);
			MIP_HomePage homepage = loginpage.login(
					MIP_ReadPropertyFile.getPropertyValue("username"),
					MIP_ReadPropertyFile.getPropertyValue("password"));
			homepage.changeLanguage("Inglés").clickOnMenu(
					MIP_Menu_Constants.CUSTOMER);
			homepage.clickOnMenu(MIP_Menu_Constants.SWITCH_PRODUCT_LEVEL);
			switchprodictlevel = PageFactory.initElements(driver,
					MIP_SwitchProductLevelPage.class);
			Assert.assertTrue(switchprodictlevel.mobileNum.isDisplayed());
			Assert.assertTrue(switchprodictlevel.searchIcon.isDisplayed());
		} catch (Throwable t) {
			switchprodictlevel.clickonLogout();
			log.info("TC316 Test Failed");
			log.info("Error occured in the test case TC316", t);
			throw t;
		}
	}

	@Test(testName = "TC317", dataProvider = "msisdnSwitchProductLevel", dataProviderClass = MIP_CustomerManagement_TestData.class)
	public void switchProductLevelTwo(String msisdn) throws Throwable {
		MIP_SwitchProductLevelPage switchprodictlevel = null;
		try {
			logger = report.startTest("CoverHistory-TC317");
			log.info("Running the test case TC317");
			MIP_LoginPage loginpage = PageFactory.initElements(driver,
					MIP_LoginPage.class);
			MIP_HomePage homepage = loginpage.login(
					MIP_ReadPropertyFile.getPropertyValue("username"),
					MIP_ReadPropertyFile.getPropertyValue("password"));
			homepage.changeLanguage("Inglés").clickOnMenu(
					MIP_Menu_Constants.CUSTOMER);
			homepage.clickOnMenu(MIP_Menu_Constants.SWITCH_PRODUCT_LEVEL);
			switchprodictlevel = PageFactory.initElements(driver,
					MIP_SwitchProductLevelPage.class);
			switchprodictlevel.enterMsisdn(msisdn);
			switchprodictlevel.clickOnSearchButton();
			Assert.assertTrue(switchprodictlevel.ValidateSwitchProductLevel());
			Assert.assertTrue(MIP_SwitchProductLevel_Queries
					.getCurrentCoverLevel(msisdn).contains(
							switchprodictlevel.getCurrentCoverLevel()));
			List<String> level = MIP_SwitchProductLevel_Queries
					.getLifeBenefitLevels(msisdn);
			List<WebElement> list = switchprodictlevel
					.getLifeBenefitLevelDropDownValue();
			for (int i = 0; i < list.size(); i++) {
				String text = list.get(i).getText().replaceAll("\\,", "");
				if (!text.equalsIgnoreCase("")) {
					Assert.assertTrue(level.toString().contains(text));
				}
			}

		} catch (Throwable t) {
			switchprodictlevel.clickonLogout();
			log.info("TC317 Test Failed");
			log.info("Error occured in the test case TC317", t);
			throw t;
		}
	}

	@Test(testName = "TC317", dataProvider = "SwitchProductLevelPositive", dataProviderClass = MIP_CustomerManagement_TestData.class)
	public void switchProductLevelThree(String testcase, String msisdn,
			String benefitLevel, String successMsg, String sms)
			throws Throwable {
		MIP_SwitchProductLevelPage switchprodictlevel = null;
		try {
			logger = report.startTest("CoverHistory- " + testcase);
			log.info("Running the test case TC317");
			MIP_LoginPage loginpage = PageFactory.initElements(driver,
					MIP_LoginPage.class);
			MIP_HomePage homepage = loginpage.login(
					MIP_ReadPropertyFile.getPropertyValue("username"),
					MIP_ReadPropertyFile.getPropertyValue("password"));
			homepage.changeLanguage("Inglés").clickOnMenu(
					MIP_Menu_Constants.CUSTOMER);
			homepage.clickOnMenu(MIP_Menu_Constants.SWITCH_PRODUCT_LEVEL);
			switchprodictlevel = PageFactory.initElements(driver,
					MIP_SwitchProductLevelPage.class);
			switchprodictlevel.enterMsisdn(msisdn);
			switchprodictlevel.clickOnSearchButton();
			switchprodictlevel.switchProductLevel(benefitLevel)
					.clickOnSaveChanges().confirmPopUp("yes");
			Assert.assertTrue(switchprodictlevel.getSuccessMessage()
					.equalsIgnoreCase(successMsg.trim()));
			int confirmation_status=MIP_SwitchProductLevel_Queries.getConfirmationStatus(msisdn);
			if(confirmation_status==1){
			Assert.assertTrue(MIP_SwitchProductLevel_Queries
					.getCurrentCoverLevel(msisdn).contains(
							benefitLevel.replaceAll("\\,", "")));
			}else if(confirmation_status==0){
				Assert.assertTrue(MIP_SwitchProductLevel_Queries
						.getProductLevelforConfirmedCustomer(msisdn).contains(
								benefitLevel.replaceAll("\\,", "")));
			}
			Assert.assertTrue(MIP_SwitchProductLevel_Queries
					.getSwitchCoverLevelSMS(msisdn)
					.equalsIgnoreCase(sms.trim()));

		} catch (Throwable t) {
			switchprodictlevel.clickonLogout();
			log.info("TC317 Test Failed");
			log.info("Error occured in the test case " + testcase, t);
			throw t;
		}
	}

	@AfterMethod(alwaysRun = true)
	public void after_test(ITestResult res) {

		if (res.getStatus() == ITestResult.FAILURE) {
			MIP_ScreenShots.takeScreenShot(driver, res.getName());
			logger.log(LogStatus.FAIL, "Test Failed");
		}
	}

	@AfterTest(alwaysRun = true)
	public void tear_down() {
		MIP_BrowserFactory.closeDriver(driver);
		report.endTest(logger);
		report.flush();
	}
}
